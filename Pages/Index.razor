@page "/"
@using CompassApi
@using GeneralPurposeLib
@using GPSCompassClient.Data
@inject IJSRuntime JsRuntime

<CompassAuthenticator OnLogin="OnLogin"></CompassAuthenticator>


<DashGui Page="DashGui.CurrentPage.Dashboard" Title="Dashboard">
    
    <!-- Two columns -->
    <div class="row">
    
        <div class="col-md-6">
            <h3>Classes</h3>
            @if (_classesToday != null) {
                @foreach (CompassClass item in _classesToday) {
                    @switch (item.ActivityType) {
                        case CompassClassType.Normal:
                        case CompassClassType.Unknown: {
                            string hoverText = $"<p style=\"font-size: small\">Room: {item.HtmlRoom}</p><p style=\"font-size: small\">Teacher: {item.Teacher}</p><p style=\"font-size: small\">Length: {Extensions.ToFormat(item.EndTime - item.StartTime, "{h} hrs {m} min")}</p>";
                            <div class="border-light p-2 rounded" style="background-color: rgba(84,86,96,0.95)">
                                <h6 style="font-size: 15px">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <Tooltip Text="@hoverText">
                                                <a class="blackLink" href="/lesson?lesson=@item.LessonId">@((MarkupString) (item.Name == "Unknown" || string.IsNullOrWhiteSpace(item.Name) ? item.Id : item.Name))</a>
                                            </Tooltip>
                                        </div>
                                        <div class="col-md-6 text-end">
                                            <em>@item.StartTime.ToShortTimeString()-@item.EndTime.ToShortTimeString()</em>
                                        </div>
                                    </div>
                                </h6>
                            </div>
                            break;
                        }

                        case CompassClassType.Exempt:
                            <div class="border-light p-2 rounded" style="background-color: rgba(148,150,55,0.95)">
                                <h6 style="font-size: 15px">Exempt - User is exempt from activities</h6>
                            </div>
                            break;
                            
                        case CompassClassType.WeekNumber:
                            <div class="border-light p-2 rounded" style="background-color: rgba(148,150,55,0.95)">
                                <h6 style="font-size: 15px">@item.Id</h6>
                            </div>
                            break;

                        case CompassClassType.DueTask: {
                            string hoverText = $"<p style=\"font-size: small\">Due In: {Extensions.ToFormat(item.EndTime.ToLocalTime() - DateTime.Now, "{d} days {h} hrs {m} min")}</p>";
                            <div class="border-light p-2 rounded" style="background-color: rgba(187,67,67,0.95)">
                                <h6 style="font-size: 15px">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <Tooltip Text="@hoverText">
                                                <h6 style="font-size: 15px">@item.Id</h6>
                                            </Tooltip>
                                        </div>
                                        <div class="col-md-6 text-end">
                                            <em>Due: @item.EndTime.ToShortTimeString()</em>
                                        </div>
                                    </div>
                                </h6>
                            </div>
                            break;
                        }

                        case CompassClassType.Event: {
                            string hoverText = $"<p style=\"font-size: small\">Location: {item.HtmlRoom}</p><p style=\"font-size: small\">Teacher: {item.Teacher}</p><p style=\"font-size: small\">Length: {Extensions.ToFormat(item.EndTime - item.StartTime, "{h} hrs {m} min")}</p>";
                            <div class="border-light p-2 rounded" style="background-color: rgba(87,105,77,0.95)">
                                <h6 style="font-size: 15px">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <Tooltip Text="@hoverText">
                                                <a class="blackLink" href="/lesson?lesson=@item.LessonId">@((MarkupString) (item.Name == "Unknown" || string.IsNullOrWhiteSpace(item.Name) ? item.Id : item.Name))</a>
                                            </Tooltip>
                                        </div>
                                        <div class="col-md-6 text-end">
                                            <em>@item.StartTime.ToShortTimeString()-@item.EndTime.ToShortTimeString()</em>
                                        </div>
                                    </div>
                                </h6>

                            </div>
                            break;
                        }

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                    
                    <br/>
                }
                @if (_classesToday.Length == 0) {
                    <h4>No Scheduled Activities</h4>
                }
            }
            else {
                <h4>Loading...</h4>
            }
        </div>
    
        <div class="col-md-6">
            <h3>News</h3>
            @if (_newsItems != null) {
                @foreach (CompassNewsItem item in _newsItems) {
                    <div class="border-light p-2 rounded" style="background-color: rgba(84,86,96,0.95)">
                        <h4>@((MarkupString) item.Title)</h4>
                        <p style="font-size: small">@((MarkupString) item.Content)</p>
                        <p>
                            <img class="circle-image" width="50" height="50" src="@item.SenderProfilePictureUrl" alt="@item.SenderUsername's profile picture"/>
                            <em>@((MarkupString) item.SenderUsername)</em>
                        </p>
                    </div>
                    <br/>
                }
            }
            else {
                <h4>Loading...</h4>
            }
        </div>
    
    </div>

</DashGui>

@code {
    
    private CompassNewsItem[]? _newsItems;
    private CompassClass[]? _classesToday;

    private async void OnLogin(CachedCompassClient client) {
        HtmlInteractor htmlInteractor = new(JsRuntime);
        await htmlInteractor.Log("Home page login signal received");
        
        Task<IEnumerable<CompassNewsItem>> getNewsItems = client.GetNewsItems(0, 5);
        Task _ = getNewsItems.ContinueWith(async task => {
            _newsItems = task.Result.ToArray();
            await htmlInteractor.Log("Obtained news items, reloading dom");
            InvokeAsync(StateHasChanged).Wait();
        });
        
        Task<IEnumerable<CompassClass>> getClassesToday = client.GetClasses(false);
        Task unused = getClassesToday.ContinueWith( async task => {
            _classesToday = task.Result.ToArray();
            // Sort all classes today so that the classes with activityType == Normal are at the top
            Array.Sort(_classesToday, (a, b) => {
                if (a.ActivityType == b.ActivityType) {
                    return 0;
                }
                if (a.ActivityType == CompassClassType.Normal) {
                    return 1;
                }
                return -1;
            });
            await htmlInteractor.Log("Obtained and sorted classes with minimal information, reloading dom");
            InvokeAsync(StateHasChanged).Wait();
            
            // Get classes again but with more detail
            Task<IEnumerable<CompassClass>> getClassesToday = client.GetClasses();
            Task unused = getClassesToday.ContinueWith(async task => {
                _classesToday = task.Result.ToArray();
                // Sort all classes today so that the classes with activityType == Normal are at the top
                Array.Sort(_classesToday, (a, b) => {
                    if (a.ActivityType == b.ActivityType) {
                        return 0;
                    }
                    if (a.ActivityType == CompassClassType.Normal) {
                        return 1;
                    }
                    return -1;
                });
                await htmlInteractor.Log("Obtained and sorted classes with detailed information, reloading dom");
                InvokeAsync(StateHasChanged).Wait();
            });
        });
    }

}
