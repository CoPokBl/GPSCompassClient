@page "/"
@using CompassApi
@using GPSCompassClient.Data
@inject IJSRuntime JsRuntime

<CompassAuthenticator OnLogin="OnLogin"></CompassAuthenticator>


<DashGui Page="DashGui.CurrentPage.Dashboard" Title="Dashboard">
    
    <!-- Two columns -->
    <div class="row">
    
        <div class="col-md-6">
            <h3>Classes</h3>
            @if (_classesToday != null) {
                <ClassesDisplay Scale="1.7" @ref="_classesDisplay" Classes="_classesToday"></ClassesDisplay>
            }
            else {
                <h4>Loading...</h4>
            }
        </div>
    
        <div class="col-md-6">
            <h3>News</h3>
            @if (_newsItems != null) {
                @foreach (CompassNewsItem item in _newsItems) {
                    <div class="border-light p-2 rounded" style="background-color: rgba(84,86,96,0.95)">
                        <h4>@((MarkupString) item.Title)</h4>
                        <p style="font-size: small">@((MarkupString) item.Content)</p>
                        <p>
                            <img class="circle-image" width="50" height="50" src="@item.SenderProfilePictureUrl" alt="@item.SenderUsername's profile picture"/>
                            <em>@((MarkupString) item.SenderUsername)</em>
                        </p>
                    </div>
                    <br/>
                }
            }
            else {
                <h4>Loading...</h4>
            }
        </div>
    
    </div>

</DashGui>

@code {
    
    private CompassNewsItem[]? _newsItems;
    private CompassClass[]? _classesToday;
    private readonly DateTime? _startDate = null; //DateTime.Today.AddMonths(-2).AddDays(1);
    private readonly DateTime? _endDate = null; //DateTime.Today.AddMonths(-2).AddDays(2);

    private ClassesDisplay? _classesDisplay;

    private async void OnLogin(CachedCompassClient client) {
        HtmlInteractor htmlInteractor = new(JsRuntime);
        await htmlInteractor.Log("Home page login signal received");

        Task<IEnumerable<CompassNewsItem>> getNewsItems = client.GetNewsItems(0, 5);
        Task _ = getNewsItems.ContinueWith(async task => {
            _newsItems = task.Result.ToArray();
            await htmlInteractor.Log("Obtained news items, reloading dom");
            await InvokeAsync(StateHasChanged);
        });
        
        Task<IEnumerable<CompassClass>> getClassesToday = client.GetClasses(false, _startDate, _endDate);
        Task unused = getClassesToday.ContinueWith( async task => {
            _classesToday = task.Result.ToArray();
            // Sort all classes today so that the classes with activityType == Normal are at the top
            Array.Sort(_classesToday, (a, b) => {
                if (a.ActivityType == b.ActivityType) {
                    return 0;
                }
                if (a.ActivityType == CompassClassType.Normal) {
                    return 1;
                }
                return -1;
            });
            await htmlInteractor.Log($"Obtained and sorted classes with minimal information ({_classesToday.Length}), reloading dom");
            await InvokeAsync(StateHasChanged);
            await htmlInteractor.Log("My dom was reloaded");
            _classesDisplay!.Reload();
            await htmlInteractor.Log($"Dom reload complete");
        });
        
        // Get classes again but with more detail
        Task<IEnumerable<CompassClass>> getClassesTodayDetailed = client.GetClasses(true, _startDate, _endDate);
        Task unused1 = getClassesTodayDetailed.ContinueWith(async detailedTask => {
            CompassClass[] result = detailedTask.Result.ToArray();
            if (result.Length == 0) {
                await htmlInteractor.Log($"Obtained and sorted classes with detailed information, however the length of the result was 0, ignoring.");
                return;
            }
            
            // Wait until the quick load finishes
            await htmlInteractor.Log($"Detailed class get complete! Waiting for quick load.");
            while (_classesToday == null) {
                Task.Yield();
            }
            
            await htmlInteractor.Log($"Detected quick load complete, updating UI.");
                
            _classesToday = result;
            // Sort all classes today so that the classes with activityType == Normal are at the top
            Array.Sort(_classesToday, (a, b) => {
                if (a.ActivityType == b.ActivityType) {
                    return 0;
                }
                if (a.ActivityType == CompassClassType.Normal) {
                    return 1;
                }
                return -1;
            });
            await htmlInteractor.Log($"Obtained and sorted classes with detailed information ({_classesToday.Length}), reloading dom");
            await InvokeAsync(StateHasChanged);
            _classesDisplay!.Reload();
        });
    }

}
