@page "/Calender"
@using CompassApi
@using GPSCompassClient.Data
@inject IJSRuntime JsRuntime

<CompassAuthenticator OnLogin="OnLogin"></CompassAuthenticator>

<DashGui Page="DashGui.CurrentPage.Calender" Title="Calendar">
    @if (_classesOnEachDay == null) {
        <h1>Loading...</h1>
    }
    else {
        
        <!-- Controls to select the date -->
        <div class="row">
            <div class="col-md-4">
                <div class="input-group mb-3">
                  <span class="input-group-text" id="basic-addon1">Date</span>
                  <input type="date" class="form-control" id="date" value="@_date.ToString("yyyy-MM-dd")" @onchange="DateChange">
                </div>
            </div>
        </div>
        
        <br>
        
        <div class="row">
            @foreach((DateTime, CompassClass[]) day in _classesOnEachDay) {
                <div class="col-2 border border-light"> @* col-md-2 border border-light *@
                    <h4>@day.Item1.DayOfWeek @(day.Item1.Day)@GetOrdinalPrefix(day.Item1.Day)</h4>
                    <ClassesDisplay Classes="day.Item2.Reverse().ToArray()"></ClassesDisplay>
                </div>
            }
        </div>
    }
</DashGui>

@code {
    private (DateTime, CompassClass[])[]? _classesOnEachDay;
    private DateTime _date = DateTime.Now;
    private bool _continueWorking = true;
    private bool _isWorking;
    private CachedCompassClient? _client;

    private async void OnLogin(CachedCompassClient client) {
        HtmlInteractor interactor = new(JsRuntime);
        
        await interactor.Log("Logged in");
        _client = client;
        
        QuickLoad(client);
        SlowLoad(client);  // We load the data in two parts so that the user can see the page load quicker
    }
    
    private static string GetOrdinalPrefix(int num) {
        if (num % 10 == 1 && num % 100 != 11) {
            return "st";
        }
        if (num % 10 == 2 && num % 100 != 12) {
            return "nd";
        }
        if (num % 10 == 3 && num % 100 != 13) {
            return "rd";
        }
        return "th";
    }

    private async void DateChange() {
        HtmlInteractor interactor = new(JsRuntime);
        await interactor.Log("Date changed");
        _date = DateTime.Parse(await interactor.GetValue("date"));
        _continueWorking = false;
        while (_isWorking) {
            // Wait for the slow load to finish
        }
        _continueWorking = true;
        _classesOnEachDay = null;
        StateHasChanged();
        _classesOnEachDay = Array.Empty<(DateTime, CompassClass[])>();
        QuickLoad(_client!);
        SlowLoad(_client!);
    }

    private async void QuickLoad(CachedCompassClient client) {
        _isWorking = true;
        DateTime firstDayOfWeek = _date.AddDays(1-(int) _date.DayOfWeek);
        DateTime lastDayOfWeek = firstDayOfWeek.AddDays(4);
        
        CompassClass[] classes = (await client.GetClasses(false, firstDayOfWeek, lastDayOfWeek, 100)).ToArray();
        
        // for each day of the week, get the classes on that day
        _classesOnEachDay = Enumerable.Range(0, 5)
            .Select(i => (firstDayOfWeek.AddDays(i), classes.Where(c => c.StartTime.Date == firstDayOfWeek.AddDays(i).Date).ToArray()))
            .ToArray();
        
        StateHasChanged();
        _isWorking = false;
    }
    
    private async void SlowLoad(CachedCompassClient client) {
        _isWorking = true;
        DateTime firstDayOfWeek = _date.AddDays(1-(int)_date.DayOfWeek);
        DateTime lastDayOfWeek = firstDayOfWeek.AddDays(4);

        for (DateTime day = firstDayOfWeek; day <= lastDayOfWeek; day = day.AddDays(1)) {
            if (!_continueWorking) {
                _isWorking = false;
                return;
            }
            CompassClass[] classes = (await client.GetClasses(true, day, day, 100)).ToArray();
            
            // Replace the day in the list with the new classes which contain more details
            if (_classesOnEachDay == null) {
                // Add the day to the list if it doesn't exist
                _classesOnEachDay = new[] {(day, classes)};
            }
            else {
                _classesOnEachDay = _classesOnEachDay.Select(c => c.Item1 == day ? (day, classes) : c).ToArray();
            }
            StateHasChanged();
        }
        _isWorking = false;
    }
    
}